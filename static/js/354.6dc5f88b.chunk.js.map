{"version":3,"file":"static/js/354.6dc5f88b.chunk.js","mappings":";6VA2CA,EAzB2BA,EAAAA,MAAW,SAAAC,GACpC,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,gBAAKC,UAAWC,EAAAA,EAAAA,KAAcC,QAPZ,WAClBJ,GAASK,EAAAA,EAAAA,IAAgBN,EAAMO,KAC/BN,EAASO,EAAAA,GAAAA,YAA0BR,EAAMO,KACzCP,EAAMS,YAAYT,EAAMO,KAIxB,UACE,iBAAKJ,UAAWO,GAAAA,EAAG,UAAGN,EAAAA,EAAAA,OAAiBJ,EAAMO,KAAOP,EAAMW,UAAYP,EAAAA,EAAAA,MAAtE,WACE,iBAAKD,UAAWC,EAAAA,EAAAA,OAAhB,WACE,SAAC,KAAD,CAASQ,GAAI,YAAcZ,EAAMO,GAAjC,UACE,gBAAKM,IAAKb,EAAMc,MAAQd,EAAMc,MAAQC,EAAQC,IAAI,aAEnDhB,EAAMiB,WAAa,IAAK,0BAAOjB,EAAMiB,iBAExC,gBAAKd,UAAWC,EAAAA,EAAAA,SAAhB,UACE,gBAAKD,UAAWC,EAAAA,EAAAA,KAAhB,SAA+BJ,EAAMkB,iBClB/C,EAV4B,SAAAlB,GAC1B,IAAMmB,GAASC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,UAElD,OACE,gBAAKpB,UAAS,UAAKC,EAAAA,EAAAA,QAAL,YAAwBe,IAAWnB,EAAMO,GAAKH,EAAAA,EAAAA,GAAa,IAAzE,SACGJ,EAAMwB,WCOPC,EAAuB1B,EAAAA,MAAW,SAAAC,GACtC,IAAM0B,GAAYN,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMM,OAAOC,gBACjDC,GAAmBT,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMM,OAAOG,kBACxDC,GAAcX,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMM,OAAOK,YACnDC,GAAgBb,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMM,OAAOO,aACrDC,GAAWf,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMM,OAAOS,SACtD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCF,EAAAA,EAAAA,UAAwB,MAAhE,eAAOG,EAAP,KAAqBC,EAArB,KACA,GAAwBC,EAAAA,EAAAA,IAAU,CAAEC,WAAY,OAAQC,UAAW,IAA3DC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,OACP7C,GAAWC,EAAAA,EAAAA,MACX6C,GAAoBC,EAAAA,EAAAA,QAAuB,OAEjDC,EAAAA,EAAAA,YAAU,WACRhD,GAASiD,EAAAA,EAAAA,OACLjB,GACFQ,EAAgBR,KAEjB,KACHgB,EAAAA,EAAAA,YAAU,WAEa,IAAD,EAIX,EALLH,IACER,GACF,UAAAS,EAAkBI,eAAlB,SAA2BC,iBAC3BX,EAAgBR,GAChBM,GAAgB,IAEhB,UAAAQ,EAAkBI,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAGzD,CAACtB,IAIJ,OAAIL,GAAkB,SAAC4B,EAAA,EAAD,KAEpB,iBAAKnD,UAAWC,EAAAA,EAAAA,eAAhB,WACE,gBAAKD,UAAWC,EAAAA,EAAAA,QAAhB,SAEG+B,EAASoB,KAAI,SAAAC,GAAI,OAChB,SAAC,EAAD,CAEE7C,SAAU6B,EACV/B,YAAagC,EACbvB,KAAMsC,EAAKC,SACXlD,GAAIiD,EAAKjD,GACTO,MAAO0C,EAAKE,OAAOC,MACnB1C,WAAYuC,EAAKI,kBANZJ,EAAKjD,SAUfsB,IAAoB,SAACyB,EAAA,EAAD,KACrB,gBAAKnD,UAAWC,EAAAA,EAAAA,aAAhB,UACE,iBAAKD,UAAWC,EAAAA,EAAAA,aAAhB,WACE,iBAAKD,UAAWC,EAAAA,EAAAA,KAAhB,UAE0B,IAAvB2B,EAAY8B,SACX,gBAAK1D,UAAWC,EAAAA,EAAAA,UAAhB,UACE,oGAGJ,2BACG2B,EAAYwB,KAAI,SAAAO,GAAC,OAChB,SAAC,EAAD,CAAoBvD,GAAIuD,EAAEC,SAAUvC,QAASsC,EAAEE,MAAjCF,EAAEvD,QAElB,gBAAKsC,IAAKE,EAAV,UACE,gBAAKF,IAAKA,YAIfL,IAAgB,SAACyB,EAAD,CAAkBC,WAtCxB,SAACC,KAsC+C5D,GAAIiC,eAe5DyB,EAA0C,SAAC,GAAY,IAAV1D,EAAS,EAATA,GAClDN,GAAWC,EAAAA,EAAAA,MAMjB,OACE,SAAC,KAAD,CACEkE,SAPa,SAACC,EAAaC,GAC7BrE,GAASsE,EAAAA,EAAAA,IAAkBhE,EAAI8D,EAAK7C,UACpC8C,EAAEE,SAMAC,OAAQ,gBAAGC,EAAH,EAAGA,aAAH,OACN,kBAAMN,SAAUM,EAAcvE,UAAWC,EAAAA,EAAAA,KAAzC,WACE,SAAC,KAAD,CACEuE,UAAU,QACVzD,KAAK,UACLf,UAAWC,EAAAA,EAAAA,MACXwE,KAAK,OACLC,aAAa,SAEf,mBAAQD,KAAK,SAASzE,UAAWC,EAAAA,EAAAA,OAAjC,2EASV,IC3HQ8D,EAAe1D,EAAAA,GAAAA,WAOvB,GAAesE,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPsB,SAAC1D,GACvB,MAAO,CACLA,MAAOA,KAKgB,CACvB6C,WAAAA,IAEFc,EAAAA,EAJF,CAKEvD,uBCpBF,OAOC,WACA,aAEA,IAAIwD,EAAS,GAAGC,eAEhB,SAASC,IAGR,IAFA,IAAI/E,EAAU,GAELgF,EAAI,EAAGA,EAAIC,UAAUxB,OAAQuB,IAAK,CAC1C,IAAIE,EAAMD,UAAUD,GACpB,GAAKE,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BnF,EAAQoF,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IACxB,GAAIA,EAAIzB,OAAQ,CACf,IAAI8B,EAAQR,EAAWS,MAAM,KAAMN,GAC/BK,GACHvF,EAAQoF,KAAKG,SAGT,GAAgB,WAAZJ,EACV,GAAID,EAAIO,WAAaC,OAAOC,UAAUF,SACrC,IAAK,IAAIG,KAAOV,EACXL,EAAOgB,KAAKX,EAAKU,IAAQV,EAAIU,IAChC5F,EAAQoF,KAAKQ,QAIf5F,EAAQoF,KAAKF,EAAIO,aAKpB,OAAOzF,EAAQ8F,KAAK,KAGgBC,EAAOC,SAC3CjB,EAAWkB,QAAUlB,EACrBgB,EAAOC,QAAUjB,QAGX,kBACL,OAAOA,GADF,QAAe,OAAf,aA5CP,oCCND,KAAgB,eAAiB,iCAAiC,aAAe,+BAA+B,QAAU,0BAA0B,KAAO,uBAAuB,KAAO,uBAAuB,OAAS,yBAAyB,cAAgB,gCAAgC,KAAO,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,MAAQ,wBAAwB,KAAO,uBAAuB,OAAS,yBAAyB,QAAU,0BAA0B,GAAK,qBAAqB,OAAS,yBAAyB,UAAY,4BAA4B,UAAY","sources":["pages/Dialogs/dialog/UserDialog.tsx","pages/Dialogs/message/Message.tsx","pages/Dialogs/Messages.tsx","pages/Dialogs/MessagesContainer.tsx","../node_modules/classnames/index.js","webpack://01_educational-project/./src/pages/Dialogs/Messages.module.css?530f"],"sourcesContent":["import React, { FC } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport cn from 'classnames';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport avatar from '../../../assets/img/avatar.png';\r\nimport { dialogActions, getListMessages } from '../../../redux/reducer/dialog-reducer';\r\nimport classes from './../Messages.module.css';\r\n\r\ninterface IProps {\r\n  id: number;\r\n  photo: string | null;\r\n  name: string;\r\n  selected: number | null;\r\n  setSelected: (id: number) => void;\r\n  newMessage: number;\r\n}\r\n\r\nconst Dialog: FC<IProps> = React.memo(props => {\r\n  const dispatch = useDispatch();\r\n  const userHandler = () => {\r\n    dispatch(getListMessages(props.id));\r\n    dispatch(dialogActions.lastDialogs(props.id));\r\n    props.setSelected(props.id);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.item} onClick={userHandler}>\r\n      <div className={cn({ [classes.active]: props.id === props.selected }, classes.body)}>\r\n        <div className={classes.avatar}>\r\n          <NavLink to={'/profile/' + props.id}>\r\n            <img src={props.photo ? props.photo : avatar} alt='avatar' />\r\n          </NavLink>\r\n          {props.newMessage > 0 && <span>{props.newMessage}</span>}\r\n        </div>\r\n        <div className={classes.userInfo}>\r\n          <div className={classes.name}>{props.name}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Dialog;\r\n","import { FC } from 'react';\r\nimport { useAppSelector } from '../../../types/reducers-types';\r\nimport classes from './../Messages.module.css';\r\n\r\ninterface IProps {\r\n  message: string;\r\n  id: number;\r\n}\r\nconst Message: FC<IProps> = props => {\r\n  const userMe = useAppSelector(state => state.auth.userId);\r\n\r\n  return (\r\n    <div className={`${classes.message} ${userMe === props.id ? classes.me : ''}`}>\r\n      {props.message}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import { FormApi } from 'final-form';\r\nimport React, { FC, useEffect, useRef, useState } from 'react';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useDispatch } from 'react-redux';\r\nimport Preloader from '../../components/common/preloader/Preloader';\r\n\r\nimport { dialogActions, getDialogs, sendMessageDialog } from '../../redux/reducer/dialog-reducer';\r\nimport { RootStateType } from '../../redux/store-redux';\r\nimport { useAppSelector } from '../../types/reducers-types';\r\nimport Dialog from './dialog/UserDialog';\r\nimport Message from './message/Message';\r\nimport classes from './Messages.module.css';\r\nimport styles from './Messages.module.css';\r\n\r\ninterface IProps {\r\n  state: RootStateType;\r\n  addMessage: (text: string) => void;\r\n}\r\n\r\nconst Messages: FC<IProps> = React.memo(props => {\r\n  const isPending = useAppSelector(state => state.dialog.pendingUsers);\r\n  const isPendingMessage = useAppSelector(state => state.dialog.pendingMessage);\r\n  const listMessage = useAppSelector(state => state.dialog.messages);\r\n  const lastDialogsID = useAppSelector(state => state.dialog.firstUser);\r\n  const listUser = useAppSelector(state => state.dialog.users);\r\n  const [firstVisible, setFirstVisible] = useState(true);\r\n  const [selectedUser, setSelectedUser] = useState<number | null>(null);\r\n  const { ref, inView } = useInView({ rootMargin: '10px', threshold: 0 });\r\n  const dispatch = useDispatch();\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(getDialogs());\r\n    if (lastDialogsID) {\r\n      setSelectedUser(lastDialogsID);\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (inView) {\r\n      if (firstVisible) {\r\n        messagesAnchorRef.current?.scrollIntoView();\r\n        setSelectedUser(lastDialogsID);\r\n        setFirstVisible(false);\r\n      } else {\r\n        messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  }, [listMessage]);\r\n\r\n  const addMessage = (messageText: string) => {};\r\n\r\n  if (isPending) return <Preloader />;\r\n  return (\r\n    <div className={classes.dialogsWrapper}>\r\n      <div className={classes.dialogs}>\r\n        {/* Отображение списка пользователей, с кем есть переписка */}\r\n        {listUser.map(item => (\r\n          <Dialog\r\n            key={item.id}\r\n            selected={selectedUser}\r\n            setSelected={setSelectedUser}\r\n            name={item.userName}\r\n            id={item.id}\r\n            photo={item.photos.small}\r\n            newMessage={item.newMessagesCount}\r\n          />\r\n        ))}\r\n      </div>\r\n      {isPendingMessage && <Preloader />}\r\n      <div className={classes.dialogWindow}>\r\n        <div className={classes.dialogWindow}>\r\n          <div className={classes.list}>\r\n            {/* Отображение сообщений */}\r\n            {listMessage.length === 0 && (\r\n              <div className={classes.chatEmpty}>\r\n                <div>Выберите чат</div>\r\n              </div>\r\n            )}\r\n            <div>\r\n              {listMessage.map(m => (\r\n                <Message key={m.id} id={m.senderId} message={m.body} />\r\n              ))}\r\n              <div ref={messagesAnchorRef}>\r\n                <div ref={ref}></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {selectedUser && <FieldMessageForm addMessage={addMessage} id={selectedUser} />}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\ninterface IForm {\r\n  message: string;\r\n}\r\n\r\ninterface IFieldMessageForm {\r\n  addMessage?: (message: string) => void;\r\n  id: number;\r\n}\r\nexport const FieldMessageForm: FC<IFieldMessageForm> = ({ id }) => {\r\n  const dispatch = useDispatch();\r\n  const onSubmit = (data: IForm, e: any) => {\r\n    dispatch(sendMessageDialog(id, data.message));\r\n    e.reset();\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}\r\n      render={({ handleSubmit }) => (\r\n        <form onSubmit={handleSubmit} className={classes.form}>\r\n          <Field\r\n            component='input'\r\n            name='message'\r\n            className={classes.input}\r\n            type='text'\r\n            autoComplete='off'\r\n          />\r\n          <button type='submit' className={classes.button}>\r\n            Отправить\r\n          </button>\r\n        </form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nimport { dialogActions } from '../../redux/reducer/dialog-reducer';\r\nimport { RootStateType } from '../../redux/store-redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport Messages from './Messages';\r\n\r\nconst { addMessage } = dialogActions;\r\nconst mapStateToProps = (state: RootStateType) => {\r\n  return {\r\n    state: state,\r\n  };\r\n};\r\n\r\nexport default compose<any>(\r\n  connect(mapStateToProps, {\r\n    addMessage,\r\n  }),\r\n  withAuthRedirect,\r\n)(Messages);\r\n","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapper\":\"Messages_dialogsWrapper__YwypJ\",\"dialogWindow\":\"Messages_dialogWindow__1gblw\",\"dialogs\":\"Messages_dialogs__iZr+M\",\"user\":\"Messages_user__PCZbo\",\"name\":\"Messages_name__SmhmX\",\"avatar\":\"Messages_avatar__W6z6z\",\"last__message\":\"Messages_last__message__CPj+c\",\"item\":\"Messages_item__x7KDk\",\"list\":\"Messages_list__k7V2X\",\"form\":\"Messages_form__YxykZ\",\"input\":\"Messages_input__pIkD+\",\"body\":\"Messages_body__+rpBH\",\"button\":\"Messages_button__uH0ZZ\",\"message\":\"Messages_message__irOQy\",\"me\":\"Messages_me__Y0DQm\",\"active\":\"Messages_active__FP9nJ\",\"noMessage\":\"Messages_noMessage__vIYFY\",\"chatEmpty\":\"Messages_chatEmpty__MWF-y\"};"],"names":["React","props","dispatch","useDispatch","className","classes","onClick","getListMessages","id","dialogActions","setSelected","cn","selected","to","src","photo","avatar","alt","newMessage","name","userMe","useAppSelector","state","auth","userId","message","Messages","isPending","dialog","pendingUsers","isPendingMessage","pendingMessage","listMessage","messages","lastDialogsID","firstUser","listUser","users","useState","firstVisible","setFirstVisible","selectedUser","setSelectedUser","useInView","rootMargin","threshold","ref","inView","messagesAnchorRef","useRef","useEffect","getDialogs","current","scrollIntoView","behavior","Preloader","map","item","userName","photos","small","newMessagesCount","length","m","senderId","body","FieldMessageForm","addMessage","messageText","onSubmit","data","e","sendMessageDialog","reset","render","handleSubmit","component","type","autoComplete","compose","connect","withAuthRedirect","hasOwn","hasOwnProperty","classNames","i","arguments","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","module","exports","default"],"sourceRoot":""}