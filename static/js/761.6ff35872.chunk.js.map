{"version":3,"file":"static/js/761.6ff35872.chunk.js","mappings":"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","sources":["webpack://01_educational-project/./src/pages/Chat/messages/MessagesListComponents.module.scss?e2fa","pages/Chat/messages/MessagesListComponents.tsx","pages/Chat/Chat.tsx","webpack://01_educational-project/./src/pages/Dialogs/Messages.module.css?530f"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messageBlock\":\"MessagesListComponents_messageBlock__3B7zw\",\"messageBody\":\"MessagesListComponents_messageBody__u6u6b\",\"userData\":\"MessagesListComponents_userData__8EUjy\",\"messageBlockReverse\":\"MessagesListComponents_messageBlockReverse__SIy5w\",\"img\":\"MessagesListComponents_img__ucP2I\"};","import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { IChatMessages } from '../../../api/chat-api';\r\nimport { sendMessage } from '../../../redux/reducer/chat-reducer';\r\nimport { RootStateType } from '../../../redux/store-redux';\r\nimport avatarPhoto from '../../../assets/img/avatar.png';\r\nimport classes from '../../Dialogs/Messages.module.css';\r\nimport cl from './MessagesListComponents.module.scss';\r\nimport Preloader from '../../../components/common/preloader/Preloader';\r\n\r\nexport const Message = (m: IChatMessages) => {\r\n  const myId = useSelector((state: RootStateType) => state.auth.userId);\r\n  return (\r\n    <div className={myId === m.userId ? cl.messageBlockReverse : cl.messageBlock}>\r\n      <div>\r\n        <div className={cl.img}></div>\r\n        <div className={cl.userData}>\r\n          <NavLink to={'/profile/' + m.userId}>\r\n            <img src={m.photo ? m.photo : avatarPhoto} alt='userAvatar' />\r\n          </NavLink>\r\n          <div className={cl.messageBody}> {m.message ? m.message : 'пустое сообщение'}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const SendMessageForm = () => {\r\n  const dispatch = useDispatch();\r\n  const status = useSelector((state: RootStateType) => state.chat.status);\r\n  const [value, setValue] = useState('');\r\n\r\n  const sendMessageHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    dispatch(sendMessage(value));\r\n    setValue('');\r\n  };\r\n  if (status === 'pending') return <Preloader />;\r\n\r\n  return (\r\n    <form onSubmit={sendMessageHandler} className={classes.form}>\r\n      <input\r\n        type='text'\r\n        value={value}\r\n        onChange={e => setValue(e.target.value)}\r\n        className={classes.input}\r\n      />\r\n      <button disabled={status !== 'ready'} className={classes.button}>\r\n        Отправить\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n","import React, { FC, useEffect, useRef, useState } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n  actions,\r\n  startMessagesListening,\r\n  stoptMessagesListening,\r\n} from '../../redux/reducer/chat-reducer';\r\nimport { RootStateType } from '../../redux/store-redux';\r\nimport classes from '../Dialogs/Messages.module.css';\r\nimport { Message, SendMessageForm } from './messages/MessagesListComponents';\r\n\r\nconst Chat = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stoptMessagesListening());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.dialogWindow}>\r\n        <div className={classes.list}>\r\n          <Messages />\r\n        </div>\r\n        <SendMessageForm />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n\r\nexport const Messages = React.memo(() => {\r\n  const [firstVisible, setFirstVisible] = useState(true);\r\n  const messages = useSelector((state: RootStateType) => state.chat.messages);\r\n  const status = useSelector((state: RootStateType) => state.chat.status);\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const { ref, inView } = useInView({ rootMargin: '10px', threshold: 0 });\r\n\r\n  useEffect(() => {\r\n    if (inView) {\r\n      if (firstVisible) {\r\n        messagesAnchorRef.current?.scrollIntoView();\r\n        setFirstVisible(false);\r\n      } else {\r\n        messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n      }\r\n    }\r\n  }, [messages]);\r\n\r\n  if (messages.length == 0 && status === 'ready') {\r\n    return (\r\n      <div className={classes.noMessage}>\r\n        <span>Нет сообщений</span>{' '}\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      {messages.map((m, i) => (\r\n        <Message {...m} key={m.id} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}>\r\n        <div ref={ref}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapper\":\"Messages_dialogsWrapper__YwypJ\",\"dialogWindow\":\"Messages_dialogWindow__1gblw\",\"dialogs\":\"Messages_dialogs__iZr+M\",\"user\":\"Messages_user__PCZbo\",\"name\":\"Messages_name__SmhmX\",\"avatar\":\"Messages_avatar__W6z6z\",\"last__message\":\"Messages_last__message__CPj+c\",\"item\":\"Messages_item__x7KDk\",\"list\":\"Messages_list__k7V2X\",\"form\":\"Messages_form__YxykZ\",\"input\":\"Messages_input__pIkD+\",\"body\":\"Messages_body__+rpBH\",\"button\":\"Messages_button__uH0ZZ\",\"message\":\"Messages_message__irOQy\",\"me\":\"Messages_me__Y0DQm\",\"active\":\"Messages_active__FP9nJ\",\"noMessage\":\"Messages_noMessage__vIYFY\",\"chatEmpty\":\"Messages_chatEmpty__MWF-y\"};"],"names":["Message","m","myId","useSelector","state","auth","userId","className","cl","to","src","photo","avatarPhoto","alt","message","SendMessageForm","dispatch","useDispatch","status","chat","useState","value","setValue","Preloader","onSubmit","e","preventDefault","sendMessage","classes","type","onChange","target","disabled","useEffect","startMessagesListening","stoptMessagesListening","Messages","React","firstVisible","setFirstVisible","messages","messagesAnchorRef","useRef","useInView","rootMargin","threshold","ref","inView","current","scrollIntoView","behavior","length","map","i","key","id"],"sourceRoot":""}