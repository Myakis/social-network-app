{"version":3,"file":"static/js/868.366a9925.chunk.js","mappings":"6PACA,GAAgB,eAAiB,iCAAiC,aAAe,+BAA+B,QAAU,0BAA0B,KAAO,uBAAuB,KAAO,uBAAuB,OAAS,yBAAyB,cAAgB,gCAAgC,KAAO,uBAAuB,KAAO,uBAAuB,KAAO,uBAAuB,MAAQ,wBAAwB,MAAQ,wBAAwB,OAAS,yBAAyB,QAAU,0BAA0B,GAAK,qBAAqB,OAAS,0B,SC+BriB,EAtB2B,SAAAA,IACRC,EAAAA,EAAAA,MACjB,OACE,gBAAKC,UAAWC,EAAAA,KAAhB,UACE,UAAC,KAAD,CACED,UAAW,SAAAE,GAAI,OAAKA,EAAKC,SAAWF,EAAAA,OAAiB,IAAM,IAAMA,EAAAA,MACjEG,GAAI,GAAKN,EAAMO,GAFjB,WAGE,gBAAKL,UAAWC,EAAAA,OAAhB,UACE,gBACEK,IAAI,0EACJC,IAAI,cAGR,iBAAKP,UAAWC,EAAAA,SAAhB,WACE,gBAAKD,UAAWC,EAAAA,KAAhB,SAA+BH,EAAMU,QACrC,gBAAKR,UAAWC,EAAAA,cAAhB,oICXV,EAN4B,SAAAH,GAC1B,OACE,gBAAKE,UAAS,UAAKC,EAAAA,QAAL,YAAwBH,EAAMW,KAAOR,EAAAA,GAAa,IAAhE,SAAuEH,EAAMY,WCsC3EC,EAA0C,SAAAb,GAM9C,OACE,SAAC,KAAD,CACEc,SAPa,SAACC,EAAaC,GAC7BhB,EAAMiB,WAAWF,EAAKH,SACtBI,EAAEE,SAMAC,OAAQ,gBAAGC,EAAH,EAAGA,aAAH,OACN,kBAAMN,SAAUM,EAAclB,UAAWC,EAAAA,KAAzC,WACE,SAAC,KAAD,CACEkB,UAAU,QACVX,KAAK,UACLR,UAAWC,EAAAA,MACXmB,KAAK,OACLC,aAAa,SAEf,mBAAQD,KAAK,SAASpB,UAAWC,EAAAA,OAAjC,2EASV,EA9D6B,SAAAH,GAC3B,IAKIwB,EAAWxB,EAAMyB,MAAMC,OAAOC,MAAMC,KAAI,SAAAC,GAAI,OAC9C,SAAC,EAAD,CAAsBnB,KAAMmB,EAAKnB,KAAMH,GAAIsB,EAAKtB,IAAnCsB,EAAKtB,OAIhBuB,EAAc9B,EAAMyB,MAAMC,OAAOd,QAAQgB,KAAI,SAACC,EAAME,GAAP,OAC/C,SAAC,EAAD,CAAiBnB,QAASiB,EAAKjB,QAASL,GAAIsB,EAAKtB,GAAII,KAAMkB,EAAKlB,MAAlDoB,MAGhB,OACE,iBAAK7B,UAAWC,EAAAA,eAAhB,WACE,gBAAKD,UAAWC,EAAAA,QAAhB,SAAkCqB,KAClC,iBAAKtB,UAAWC,EAAAA,aAAhB,WACE,gBAAKD,UAAWC,EAAAA,KAAhB,UACE,gBAAKD,UAAWC,EAAAA,KAAhB,SAA+B2B,OAEjC,SAACjB,EAAD,CAAkBI,WArBL,SAACe,GAClBhC,EAAMiB,WAAWe,aCPbf,EAAegB,EAAAA,EAAAA,WAOvB,GAAeC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KAPsB,SAACV,GACvB,MAAO,CACLA,MAAOA,KAKgB,CACvBR,WAAAA,IAEFmB,EAAAA,EAJF,CAKEC","sources":["webpack://01_educational-project/./src/componetns/messages/Messages.module.css?d513","componetns/messages/dialog/DialogUserItem.tsx","componetns/messages/message/Message.tsx","componetns/messages/Messages.tsx","componetns/messages/MessagesConteiner.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapper\":\"Messages_dialogsWrapper__KNpXr\",\"dialogWindow\":\"Messages_dialogWindow__+TQ6m\",\"dialogs\":\"Messages_dialogs__SHtFv\",\"user\":\"Messages_user__nf7eo\",\"name\":\"Messages_name__R6jTa\",\"avatar\":\"Messages_avatar__ZnMM9\",\"last__message\":\"Messages_last__message__HTUd8\",\"item\":\"Messages_item__1bytq\",\"list\":\"Messages_list__JHe9C\",\"form\":\"Messages_form__do6TT\",\"input\":\"Messages_input__Flofv\",\"inout\":\"Messages_inout__MPEHB\",\"button\":\"Messages_button__IiPR6\",\"message\":\"Messages_message__KNSOY\",\"me\":\"Messages_me__f+Y-y\",\"active\":\"Messages_active__I2T8k\"};","import { FC } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport classes from './../Messages.module.css';\r\n\r\ninterface IProps {\r\n  name: string;\r\n  id: number;\r\n}\r\nconst Dialog: FC<IProps> = props => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className={classes.item}>\r\n      <NavLink\r\n        className={link => (link.isActive ? classes.active : '') + ' ' + classes.user}\r\n        to={'' + props.id}>\r\n        <div className={classes.avatar}>\r\n          <img\r\n            src='https://i.pinimg.com/236x/a9/bb/b4/a9bbb43d833e264c66fce9f8d62601bb.jpg'\r\n            alt='avatar'\r\n          />\r\n        </div>\r\n        <div className={classes.userInfo}>\r\n          <div className={classes.name}>{props.name}</div>\r\n          <div className={classes.last__message}>последнее сообщение</div>\r\n        </div>\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n","import { FC } from 'react';\r\nimport classes from './../Messages.module.css';\r\n\r\ninterface IProps {\r\n  message: string;\r\n  user: string | undefined;\r\n  id: number;\r\n}\r\nconst Message: FC<IProps> = props => {\r\n  return (\r\n    <div className={`${classes.message} ${props.user ? classes.me : ''}`}>{props.message}</div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import { FormApi } from 'final-form';\r\nimport React, { FC, useState } from 'react';\r\nimport { Form, Field } from 'react-final-form';\r\nimport { RootStateType } from '../../redux/store-redux';\r\n\r\nimport Dialog from './dialog/DialogUserItem';\r\nimport Message from './message/Message';\r\nimport classes from './Messages.module.css';\r\n\r\ninterface IProps {\r\n  state: RootStateType;\r\n  addMessage: (text: string) => void;\r\n}\r\nconst Messages: FC<IProps> = props => {\r\n  const addMessage = (messageText: string) => {\r\n    props.addMessage(messageText);\r\n  };\r\n\r\n  // Отображение списка пользователей, с кем есть переписка\r\n  let listUser = props.state.dialog.users.map(item => (\r\n    <Dialog key={item.id} name={item.name} id={item.id} />\r\n  ));\r\n\r\n  //Отображение сообщений\r\n  let listMessage = props.state.dialog.message.map((item, i) => (\r\n    <Message key={i} message={item.message} id={item.id} user={item.user} />\r\n  ));\r\n\r\n  return (\r\n    <div className={classes.dialogsWrapper}>\r\n      <div className={classes.dialogs}>{listUser}</div>\r\n      <div className={classes.dialogWindow}>\r\n        <div className={classes.list}>\r\n          <div className={classes.item}>{listMessage}</div>\r\n        </div>\r\n        <FieldMessageForm addMessage={addMessage} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface IForm {\r\n  message: string;\r\n}\r\n\r\ninterface IFieldMessageForm {\r\n  addMessage: (message: string) => void;\r\n}\r\nconst FieldMessageForm: FC<IFieldMessageForm> = props => {\r\n  const onSubmit = (data: IForm, e: any) => {\r\n    props.addMessage(data.message);\r\n    e.reset();\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}\r\n      render={({ handleSubmit }) => (\r\n        <form onSubmit={handleSubmit} className={classes.form}>\r\n          <Field\r\n            component='input'\r\n            name='message'\r\n            className={classes.input}\r\n            type='text'\r\n            autoComplete='off'\r\n          />\r\n          <button type='submit' className={classes.button}>\r\n            Отправить\r\n          </button>\r\n        </form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nimport { DialogActions } from '../../redux/reducer/dialog-reducer';\r\nimport { RootStateType } from '../../redux/store-redux';\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\r\nimport Messages from './Messages';\r\n\r\nconst { addMessage } = DialogActions;\r\nconst mapStateToProps = (state: RootStateType) => {\r\n  return {\r\n    state: state,\r\n  };\r\n};\r\n\r\nexport default compose<any>(\r\n  connect(mapStateToProps, {\r\n    addMessage,\r\n  }),\r\n  withAuthRedirect,\r\n)(Messages);\r\n"],"names":["props","useDispatch","className","classes","link","isActive","to","id","src","alt","name","user","message","FieldMessageForm","onSubmit","data","e","addMessage","reset","render","handleSubmit","component","type","autoComplete","listUser","state","dialog","users","map","item","listMessage","i","messageText","DialogActions","compose","connect","withAuthRedirect","Messages"],"sourceRoot":""}